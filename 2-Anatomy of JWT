'''
    Author: Naveen Nirban
    Date: 05/September/2023
    Description: Converts header(JSON) & payload(JSON) into base64 string, hashing(HMAC) both with secret key 
                 & convert signature too into base64. Combine all of them, thats your JWT. Cross check at https://jwt.io
'''
import json,base64,hmac,hashlib,time

# Define your secret key (you should keep this secret)
secret_key = 'nahi_batunga'

# Define the header and payload as dictionaries
header = {
    "alg": "HS256",  # Algorithm used for signing (HMAC SHA-256)
    "typ": "JWT"     # Token type
}

payload = {
    "sub": "1234567890",  # Subject (user ID)
    "iat": int(time.time())  # Issued at timestamp
}

# Encode the header and payload as Base64 URL-safe strings without padding
header_encoded = base64.urlsafe_b64encode(json.dumps(header).encode('utf-8')).rstrip(b'=').decode('utf-8')
payload_encoded = base64.urlsafe_b64encode(json.dumps(payload).encode('utf-8')).rstrip(b'=').decode('utf-8')

# Create a signature by hashing the header and payload with the secret key
signature = hmac.new(secret_key.encode('utf-8'), f"{header_encoded}.{payload_encoded}".encode('utf-8'), hashlib.sha256)
signature_encoded = base64.urlsafe_b64encode(signature.digest()).rstrip(b'=').decode('utf-8')

# Combine the encoded header, payload, and signature to create the JWT
jwt = f"{header_encoded}.{payload_encoded}.{signature_encoded}"

print("Generated JWT: "+jwt)
